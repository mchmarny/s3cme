name: slsa_provenance_create

on:
  workflow_call:
    inputs:
      image_digest:
        description: 'Fully-qualified image digest to verify (registry/image@sha256:digest)'
        required: true
        type: string
      auth_provider:
        description: 'OIDC provider ID'
        required: true
        type: string
      auth_user:
        description: 'OIDC user ID'
        required: true
        type: string
      cosign_version:
        description: 'The version of cosign to use'
        required: false
        type: string
        default: 'v2.0.0'
      builder:
        description: 'Name of the SLSA provenance builder to use'
        required: false
        type: string
        default: slsa-generator-container-linux-amd64
      builder_version:
        description: 'The version of SLSA provenance builder to use'
        required: false
        type: string
        default: 'v1.5.0'
      predicate_file:
        description: 'The name of the predicate file to create'
        required: false
        type: string
        default: 'predicate.json'

permissions:
  contents: read

jobs:
  provenance:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      id-token: write
    steps:

    # This is a workaround for SLSA generator reusable workflow not being able to use OIDC
    # token to authenticate to GCP Artifact Registry see:
    # https://github.com/slsa-framework/slsa-github-generator/issues/1545
    # on mac: shasum -a 256 slsa-generator-container-linux-amd64
    - name: Install SLSA Provenance Builder
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        gh -R slsa-framework/slsa-github-generator \
          release download ${{ inputs.builder_version }} -p ${{ inputs.builder }}
        chmod ug+x ${{ inputs.builder }}
        COMPUTED_HASH=$(sha256sum ${{ inputs.builder }} | cut -d ' ' -f1)
        EXPECTED_HASH="6d8b83327ac2134aa8760e1e4f9cd5d3fdbcb56599e39be2cd965f1e04aa8ede"
        if [[ "$EXPECTED_HASH" != "$COMPUTED_HASH" ]];then
            echo "error: expected $EXPECTED_HASH, computed $COMPUTED_HASH"
            exit 1
        fi

    - name: Create Predicate
      env:
        GITHUB_CONTEXT: "${{ toJSON(github) }}"
      run: |
        set -euo pipefail
        "./${{ inputs.builder }}" generate --predicate ${{ inputs.predicate_file }}
        cat ${{ inputs.predicate_file }}

    - id: auth
      name: Auth GCP
      uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d  # v1.0.0
      with:
        token_format: "access_token"
        workload_identity_provider: ${{ inputs.auth_provider }}
        service_account: ${{ inputs.auth_user }}

    - name: Install Cosign
      uses: sigstore/cosign-installer@77560e399fb1b0d50a89024c16dd3a908f8d44b5  # v3.0.0
      with:
        cosign-release: ${{ inputs.cosign_version }}

    - name: Auth Cosign
      run: |
        set -euo pipefail
        cosign version
        reg=$(echo ${{ inputs.image_digest }} | cut -d/ -f1)
        cosign login ${reg} --username=oauth2accesstoken --password=${{ steps.auth.outputs.access_token }}

    - name: Create SLSA Provenance
      run: |
        set -euo pipefail
        cosign attest \
          --predicate ${{ inputs.predicate_file }} \
          --type slsaprovenance \
          ${{ inputs.image_digest }}

  verify:
    needs:
    - provenance
    runs-on: ubuntu-latest
    permissions:
      actions: read
      id-token: write
    steps:

    - name: Checkout Code
      uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c  # v3.3.0

    - id: auth
      name: Auth GCP
      uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d  # v1.0.0
      with:
        token_format: "access_token"
        workload_identity_provider: ${{ inputs.auth_provider }}
        service_account: ${{ inputs.auth_user }}

    - name: Install Cosign
      uses: sigstore/cosign-installer@77560e399fb1b0d50a89024c16dd3a908f8d44b5  # v3.0.0
      with:
        cosign-release: ${{ inputs.cosign_version }}

    - name: Auth Cosign
      run: |
        set -euo pipefail
        cosign version
        reg=$(echo ${{ inputs.image_digest }} | cut -d/ -f1)
        cosign login ${reg} --username=oauth2accesstoken --password=${{ steps.auth.outputs.access_token }}

    - name: Verify Image SLSA Provenance
      run: |
        set -euo pipefail
        cosign verify-attestation \
          --type slsaprovenance \
          --policy policy/provenance.cue \
          ${{ inputs.image_digest }}
